{"seeAlsoSections":[{"title":"Tools","identifiers":["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/SheetsPopoversCovers","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with new tools for driving drill-down navigation with optional and enum values."},{"type":"text","text":" "},{"type":"text","text":"This includes new initializers on "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" and new overloads of the "},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":" "},{"type":"text","text":"view modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose your view or model holds a piece of optional state that represents whether or not a"},{"type":"text","text":" "},{"type":"text","text":"drill-down should occur:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Int?","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further suppose that the screen being navigated to wants a binding to the integer when it is"},{"type":"text","text":" "},{"type":"text","text":"non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". You can construct a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" that will activate when that state becomes"},{"type":"text","text":" "},{"type":"text","text":"non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and will deactivate when the state becomes "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["NavigationLink(unwrapping: self.$destination) { isActive in","  self.destination = isActive ? 42 : nil","} destination: { $number in ","  CounterView(number: $number)","} label: {","  Text(\"Go to counter\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first trailing closure is the “action” of the navigation link. It is invoked with "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"text","text":"the user taps on the link, and it is invoked with "},{"type":"codeVoice","code":"false"},{"type":"text","text":" when the user taps the back button or"},{"type":"text","text":" "},{"type":"text","text":"swipes on the left edge of the screen. It is your job to hydrate the state in the action closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second trailing closure, labeled "},{"type":"codeVoice","code":"destination"},{"type":"text","text":", takes an argument that is the binding of the"},{"type":"text","text":" "},{"type":"text","text":"unwrapped state. This binding can be handed to the child view, and any changes made by the parent"},{"type":"text","text":" "},{"type":"text","text":"will be reflected in the child, and vice-versa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For iOS 16+ you can use the "},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":" overload:"}]},{"type":"codeListing","syntax":"swift","code":["Button {","  self.destination = 42","} label: {","  Text(\"Go to counter\")","}",".navigationDestination(","  unwrapping: self.$model.destination",") { $item in ","  CounterView(number: $number)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it is not optimal to model navigation destinations as optionals. In particular, if a"},{"type":"text","text":" "},{"type":"text","text":"feature can navigate to multiple, mutually exclusive screens, then an enum is more appropriate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose that in addition to be able to drill down to a counter view that one can also open a"},{"type":"text","text":" "},{"type":"text","text":"sheet with some text. We can model those destinations as an enum:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum Destination {","  case counter(Int)","  case text(String)","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have applied the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro from"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco.swift-case-paths"},{"type":"text","text":", which allows the navigation binding"},{"type":"text","text":" "},{"type":"text","text":"to use “dynamic case lookup” to a particular enum case."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And we can hold an optional destination in state to represent whether or not we are navigated to"},{"type":"text","text":" "},{"type":"text","text":"one of these destinations:"}]},{"type":"codeListing","syntax":"swift","code":["@State var destination: Destination?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this set up you can make use of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"SwiftUI\/NavigationLink\/init(unwrapping:onNavigate:destination:label:)"},{"type":"text","text":" initializer on"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" in order to specify a binding to the optional destination, and further specify"},{"type":"text","text":" "},{"type":"text","text":"which case of the enum you want driving navigation:"}]},{"type":"codeListing","syntax":"swift","code":["NavigationLink(unwrapping: self.$destination.counter) { isActive in","  self.destination = isActive ? .counter(42) : nil","} destination: { $number in ","  CounterView(number: $number)","} label: {","  Text(\"Go to counter\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And similarly for "},{"type":"codeVoice","code":"SwiftUI\/View\/navigationDestination(unwrapping:destination:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["Button {","  self.destination = .counter(42)","} label: {","  Text(\"Go to counter\")","}",".navigationDestination(unwrapping: self.$model.destination.counter) { $number in ","  CounterView(number: $number)","}"]}]}],"variants":[{"paths":["\/documentation\/swiftuinavigation\/navigation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Navigation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to drive navigation in "},{"type":"codeVoice","code":"NavigationView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" in a concise and testable"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"kind":"article","metadata":{"modules":[{"name":"SwiftUINavigation"}],"role":"collectionGroup","title":"Navigation links and destinations"},"hierarchy":{"paths":[["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation"],["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation"]]},"topicSections":[{"title":"Supporting types","identifiers":["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/HashableObject"]}],"references":{"doc://SwiftUINavigation/documentation/SwiftUINavigation/HashableObject":{"role":"symbol","title":"HashableObject","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HashableObject"}],"abstract":[{"type":"text","text":"A protocol that adds a default implementation of "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" to an object based off its object"},{"type":"text","text":" "},{"type":"text","text":"identity."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/HashableObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HashableObject"}],"url":"\/documentation\/swiftuinavigation\/hashableobject"},"doc://SwiftUINavigation/documentation/SwiftUINavigation":{"role":"collection","title":"SwiftUINavigation","abstract":[{"type":"text","text":"Tools for making SwiftUI navigation simpler, more ergonomic and more precise."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","kind":"symbol","type":"topic","url":"\/documentation\/swiftuinavigation"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/AlertsDialogs":{"role":"collectionGroup","title":"Alerts and dialogs","abstract":[{"type":"text","text":"Learn how to present alerts and confirmation dialogs in a concise and testable manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/alertsdialogs"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/SheetsPopoversCovers":{"role":"collectionGroup","title":"Sheets, popovers, and covers","abstract":[{"type":"text","text":"Learn how to present sheets, popovers and covers in a concise and testable manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/SheetsPopoversCovers","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/sheetspopoverscovers"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Bindings":{"role":"collectionGroup","title":"Bindings","abstract":[{"type":"text","text":"Learn how to manage certain view state, such as "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" directly in your observable classes."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/bindings"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/WhatIsNavigation":{"role":"collectionGroup","title":"What is navigation?","abstract":[{"type":"text","text":"Learn how one can think of navigation as a domain modeling problem, and how that leads to the"},{"type":"text","text":" "},{"type":"text","text":"creation of concise and testable APIs for navigation."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/whatisnavigation"},"https://github.com/pointfreeco.swift-case-paths":{"title":"CasePaths","titleInlineContent":[{"type":"text","text":"CasePaths"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco.swift-case-paths","url":"https:\/\/github.com\/pointfreeco.swift-case-paths"}}}